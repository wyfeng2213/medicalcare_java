/**   
* @Title: DoctorsPatientLinkController.java 
* @Package com.cmcc.medicalcare.controller.app 
* @Description: TODO
* @author adminstrator   
* @date 2017年4月10日 上午10:35:30 
* @version V1.0   
*/
package com.cmcc.medicalcare.controller.app.doctor;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.cmcc.medicalcare.annotation.SystemControllerLog;
import com.cmcc.medicalcare.config.Constant;
import com.cmcc.medicalcare.controller.model.MessageCode;
import com.cmcc.medicalcare.controller.model.Results;
import com.cmcc.medicalcare.model.DoctorsPatientLink;
import com.cmcc.medicalcare.model.PatientDoctorsLink;
import com.cmcc.medicalcare.model.PatientUser;
import com.cmcc.medicalcare.model.SecretaryAndDoctorsAndPatientOfChatroom;
import com.cmcc.medicalcare.model.SecretaryDoctorsLink;
import com.cmcc.medicalcare.model.SecretaryPatientLink;
import com.cmcc.medicalcare.service.IDoctorsPatientLinkService;
import com.cmcc.medicalcare.service.IPatientDoctorsLinkService;
import com.cmcc.medicalcare.service.IPatientUserService;
import com.cmcc.medicalcare.service.ISecretaryAndDoctorsAndPatientOfChatroomService;
import com.cmcc.medicalcare.service.ISecretaryDoctorsLinkService;
import com.cmcc.medicalcare.service.ISecretaryPatientLinkService;
import com.cmcc.medicalcare.utils.Toolkit;
import com.easemob.server.api.impl.EasemobChatGroup;
import com.easemob.server.api.impl.EasemobChatRoom;
import com.easemob.server.api.impl.EasemobIMUsers;

import io.swagger.client.model.Chatroom;
import io.swagger.client.model.Group;
import io.swagger.client.model.UserName;
import net.sf.json.JSONArray;

/**
 * @ClassName: 医生的患者
 * @Description: TODO
 * @author adminstrator
 * @date 2017年4月10日 上午10:35:30
 * 
 */
@Controller
@RequestMapping("/app/doctorsPatientLink")
public class DoctorsPatientLinkController {

	@Resource
	private IDoctorsPatientLinkService doctorsPatientLinkService;

	@Resource
	private IPatientDoctorsLinkService patientDoctorsLinkService;

	@Resource
	private IPatientUserService patientUserService;

	@Resource
	private ISecretaryAndDoctorsAndPatientOfChatroomService secretaryAndDoctorsAndPatientOfChatroomService;

	@Resource
	private ISecretaryPatientLinkService secretaryPatientLinkService;

	/**
	 * 
	 * @Title: agreeReqeustJoinning @Description: TODO @param @param
	 *         doctorsPatientLink @param @param request @param @return
	 *         设定文件 @return Results<String> 返回类型 @throws
	 */
	@SystemControllerLog(description = "医生同意患者添加好友请求")
	@RequestMapping(value = "agreeReqeustJoinning")
	@ResponseBody
	public Results<String> agreeReqeustJoinning(@RequestParam String doctorsPatientLink, HttpServletRequest request) {
		// 添加記錄doctors_patient_link，最後調用環信接口通知患者已同意，和調用環信接口通知秘書端有新患者加入
		Results<String> results = new Results<String>();
		JSONObject doctorsUserObject = JSONObject.parseObject(doctorsPatientLink);
//		String patientName = doctorsUserObject.getString("patientName");
		System.out.println(doctorsPatientLink);
		if (doctorsUserObject != null) {
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("doctors_phone", doctorsUserObject.getString("doctorsPhone"));
			paramMap.put("patient_phone", doctorsUserObject.getString("patientPhone"));
			DoctorsPatientLink doctorsPatientLink_ = doctorsPatientLinkService
					.findByParam("selectByDoctorsPhoneAndPatientPhone", paramMap);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("doctors_phone", doctorsUserObject.getString("doctorsPhone"));
			map.put("patient_phone", doctorsUserObject.getString("patientPhone"));
			PatientDoctorsLink patientDoctorsLink_ = patientDoctorsLinkService
					.findByParam("selectByPatientPhoneAndDoctorsPhone", map);

			Map<String, Object> paramMap2 = new HashMap<String, Object>();
			paramMap2.put("patientPhone", doctorsUserObject.getString("patientPhone"));
			paramMap2.put("secretaryPhone", Constant.scretaryPhone);
			List<SecretaryPatientLink> secretaryPatientLinkList = secretaryPatientLinkService
					.getList("selectBySecretaryPhoneAndPatientPhone", paramMap2);

			Map<String, Object> paramMap3 = new HashMap<String, Object>();
			paramMap3.put("doctorsPhone", doctorsUserObject.getString("doctorsPhone"));
			paramMap3.put("patientPhone", doctorsUserObject.getString("patientPhone"));
			paramMap3.put("secretaryPhone", Constant.scretaryPhone);
			List<SecretaryAndDoctorsAndPatientOfChatroom> secretaryAndDoctorsAndPatientOfChatroomList = secretaryAndDoctorsAndPatientOfChatroomService
					.getList("selectBySecretaryPhoneAndDoctorsPhoneAndPatientPhone", paramMap3);

			if (doctorsPatientLink_ == null || patientDoctorsLink_ == null) {
				results.setCode(MessageCode.CODE_404);
				results.setMessage(MessageCode.MESSAGE_404);
				return results;
			}

			/**
			 * 调用环信接口添加好友
			 */
			String isSuccess = null;
			try {
				EasemobIMUsers easemobIMUsers = new EasemobIMUsers();
				Object result = easemobIMUsers.addFriendSingle(
						Constant.patient + doctorsUserObject.getString("patientPhone"),
						Constant.doctor + doctorsUserObject.getString("doctorsPhone"));

				System.out.println("添加好友====" + result.toString());

				JSONObject dataJsonObject = JSONObject.parseObject(result.toString());
				JSONArray entities = JSONArray.fromObject(dataJsonObject.get("entities"));
				String entity = entities.get(0).toString();
				JSONObject entityObject = JSONObject.parseObject(entity);
				isSuccess = entityObject.getString("activated");
				System.out.println("isSuccess:" + isSuccess);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}

			if (isSuccess != null && "true".equalsIgnoreCase(isSuccess)) {
				String chatroomId = null;
				String description = "问诊" + doctorsUserObject.getString("patientPhone");
				String chatroomName = doctorsPatientLink_.getPatientName();
				/**
				 * 调用环信接口创建群组
				 */
				try {
					EasemobChatGroup easemobChatGroup = new EasemobChatGroup();
					// EasemobChatRoom easemobChatRoom = new EasemobChatRoom();
					UserName userName = new UserName();
					userName.add(Constant.doctor + doctorsUserObject.getString("doctorsPhone"));
					userName.add(Constant.patient + doctorsUserObject.getString("patientPhone"));
					userName.add(Constant.scretary + Constant.scretaryPhone);
					// Chatroom chatroom = new Chatroom();
					// chatroom.description(description).maxusers(3).members(userName).name(chatroomName)
					// .owner(Constant.scretary + scretaryPhone);
					// Object result_ =
					// easemobChatRoom.createChatRoom(chatroom);
					Group group = new Group();
					group.groupname(chatroomName).desc(description)._public(true).maxusers(3).approval(false)
							.owner(Constant.scretary + Constant.scretaryPhone).members(userName);
					Object result_ = easemobChatGroup.createChatGroup(group);
					System.out.println("群组===" + result_.toString());

					JSONObject resultObject = JSONObject.parseObject(result_.toString());
					// System.out.println(resultObject.get("entities"));
					String dataStr = resultObject.getString("data");
					JSONObject dataStrObject = JSONObject.parseObject(dataStr);
					chatroomId = dataStrObject.getString("groupid");
					System.out.println("chatroomId:" + chatroomId);
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}

				if (Toolkit.isNumeric(chatroomId)) {

					doctorsPatientLink_.setType(1);
					doctorsPatientLink_.setIsVIP(2);// 非VIP
					doctorsPatientLink_.setChatroomId(chatroomId);
					patientDoctorsLink_.setType(1);
					patientDoctorsLink_.setChatroomId(chatroomId);
					doctorsPatientLinkService.update("updateByPrimaryKey", doctorsPatientLink_);
					patientDoctorsLinkService.update("updateByPrimaryKey", patientDoctorsLink_);

					SecretaryPatientLink secretaryPatientLink = new SecretaryPatientLink();
					secretaryPatientLink.setCreatetime(new Date());
					secretaryPatientLink
							.setPatientLoginId(Constant.patient + doctorsUserObject.getString("patientPhone"));
					secretaryPatientLink.setPatientName(null);
					secretaryPatientLink.setPatientPhone(doctorsUserObject.getString("patientPhone"));
					secretaryPatientLink.setSecretaryLoginId(Constant.scretary + Constant.scretaryPhone);
					secretaryPatientLink.setSecretaryName("小秘书");
					secretaryPatientLink.setSecretaryPhone(Constant.scretaryPhone);

					SecretaryAndDoctorsAndPatientOfChatroom secretaryAndDoctorsAndPatientOfChatroom = new SecretaryAndDoctorsAndPatientOfChatroom();
					secretaryAndDoctorsAndPatientOfChatroom.setChatroomDescription(description);
					secretaryAndDoctorsAndPatientOfChatroom.setChatroomId(chatroomId);
					secretaryAndDoctorsAndPatientOfChatroom.setChatroomMaxusers(3);
					secretaryAndDoctorsAndPatientOfChatroom.setChatroomName(chatroomName);
					secretaryAndDoctorsAndPatientOfChatroom.setChatroomOwner(Constant.scretary + Constant.scretaryPhone);
					secretaryAndDoctorsAndPatientOfChatroom.setCreatetime(new Date());
					secretaryAndDoctorsAndPatientOfChatroom
							.setDoctorsLoginId(Constant.doctor + doctorsUserObject.getString("doctorsPhone"));
					secretaryAndDoctorsAndPatientOfChatroom.setDoctorsName(null);
					secretaryAndDoctorsAndPatientOfChatroom
							.setDoctorsPhone(doctorsUserObject.getString("doctorsPhone"));
					secretaryAndDoctorsAndPatientOfChatroom
							.setPatientLoginId(Constant.patient + doctorsUserObject.getString("patientPhone"));
					secretaryAndDoctorsAndPatientOfChatroom.setPatientName(null);
					secretaryAndDoctorsAndPatientOfChatroom
							.setPatientPhone(doctorsUserObject.getString("patientPhone"));
					secretaryAndDoctorsAndPatientOfChatroom.setRemark(null);
					secretaryAndDoctorsAndPatientOfChatroom.setSecretaryLoginId(Constant.scretary + Constant.scretaryPhone);
					secretaryAndDoctorsAndPatientOfChatroom.setSecretaryName("小秘书");
					secretaryAndDoctorsAndPatientOfChatroom.setSecretaryPhone(Constant.scretaryPhone);

					if (secretaryPatientLinkList != null && secretaryPatientLinkList.size() < 1) {
						secretaryPatientLinkService.insert(secretaryPatientLink);

					}
					if (secretaryAndDoctorsAndPatientOfChatroomList != null
							&& secretaryAndDoctorsAndPatientOfChatroomList.size() < 1) {
						secretaryAndDoctorsAndPatientOfChatroomService.insert(secretaryAndDoctorsAndPatientOfChatroom);
					}
					results.setCode(200);
					results.setMessage(MessageCode.MESSAGE_200);
					return results;
				} else {
					results.setCode(MessageCode.CODE_501);
					results.setMessage("环信创建聊天室失败");
					return results;
				}

			} else {
				results.setCode(MessageCode.CODE_501);
				results.setMessage("环信添加好友失败");
				return results;
			}

		} else {
			results.setCode(MessageCode.CODE_201);
			results.setMessage(MessageCode.MESSAGE_201);
			return results;
		}

	}

	/**
	 * 
	 * @Title: rejectReustJoinning @Description: TODO @param @param
	 *         request @param @return 设定文件 @return Results<String> 返回类型 @throws
	 */
	@SystemControllerLog(description = "医生拒绝患者添加好友请求")
	@RequestMapping(value = "rejectReustJoinning")
	@ResponseBody
	public Results<String> rejectReustJoinning(@RequestParam String doctorsPatientLink, HttpServletRequest request) {
		Results<String> results = new Results<String>();
		JSONObject doctorsUserObject = JSONObject.parseObject(doctorsPatientLink);

		if (doctorsUserObject != null) {
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("doctors_phone", doctorsUserObject.getString("doctorsPhone"));
			paramMap.put("patient_phone", doctorsUserObject.getString("patientPhone"));
			DoctorsPatientLink doctorsPatientLink_ = doctorsPatientLinkService
					.findByParam("selectByDoctorsPhoneAndPatientPhone", paramMap);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("doctors_phone", doctorsUserObject.getString("doctorsPhone"));
			map.put("patient_phone", doctorsUserObject.getString("patientPhone"));
			PatientDoctorsLink patientDoctorsLink_ = patientDoctorsLinkService
					.findByParam("selectByPatientPhoneAndDoctorsPhone", map);

			if (doctorsPatientLink_ == null || patientDoctorsLink_ == null) {
				results.setCode(MessageCode.CODE_404);
				results.setMessage(MessageCode.MESSAGE_404);
				return results;
			}

			/**
			 * 调用环信接口拒绝好友
			 */
			// EasemobIMUsers easemobIMUsers = new EasemobIMUsers();
			//// Object result =
			// easemobIMUsers.addFriendSingle("patient_"+doctorsUserObject.getString("patientPhone"),
			// "doctor_"+doctorsUserObject.getString("doctorsPhone"));
			// Object result =
			// easemobIMUsers.addFriendSingle(doctorsUserObject.getString("patientPhone"),doctorsUserObject.getString("doctorsPhone"));
			//
			// System.out.println(result.toString());
			//
			// JSONObject dataJsonObject =
			// JSONObject.parseObject(result.toString());
			// JSONArray entities =
			// JSONArray.fromObject(dataJsonObject.get("entities"));
			// String entity = entities.get(0).toString();
			// JSONObject entityObject = JSONObject.parseObject(entity);
			// String isSuccess = entityObject.getString("activated");
			// System.out.println("isSuccess:"+isSuccess);
			//
			// if (isSuccess!=null&&"isSuccess".equalsIgnoreCase(isSuccess)) {
			doctorsPatientLink_.setType(2);
			patientDoctorsLink_.setType(2);
			doctorsPatientLinkService.update("updateByPrimaryKey", doctorsPatientLink_);
			patientDoctorsLinkService.update("updateByPrimaryKey", patientDoctorsLink_);
			results.setCode(200);
			results.setMessage(MessageCode.MESSAGE_200);
			return results;
			// }
			// else {
			// results.setCode(MessageCode.CODE_501);
			// results.setData(null);
			// results.setMessage("环信拒绝好友失败");
			// return results;
			// }

		} else

		{
			results.setCode(MessageCode.CODE_201);
			results.setMessage(MessageCode.MESSAGE_201);
			return results;
		}

	}

	/**
	 * 
	 * @Title: selectOwnPatients @Description: TODO @param @param
	 *         request @param @return 设定文件 @return Results
	 *         <DoctorsPatientLink> 返回类型 @throws
	 */
	@SystemControllerLog(description = "获取医生的患者好友列表")
	@RequestMapping(value = "selectOwnPatients")
	@ResponseBody
	Results<Map<String, Object>> selectOwnPatients(HttpServletRequest request) {
		// doctors_patient_link,查询条件为医生电话
		Results<Map<String, Object>> results = new Results<Map<String, Object>>();
		List<DoctorsPatientLink> listDoctorsPatientLink = null;
		List<DoctorsPatientLink> listDoctorsPatientLink2 = null;
		// List<DoctorsPatientLink> listDoctorsPatientLink_ = null;
		Map<String, Object> map = new HashMap<String, Object>();

		String equipmentData = request.getParameter("equipmentData");
		JSONObject dataJsonObject = JSONObject.parseObject(equipmentData);
		String doctorsPhone;
		if (dataJsonObject != null) {
			doctorsPhone = dataJsonObject.getString("phone");
			if (StringUtils.isNotBlank(doctorsPhone)) {
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("doctorsPhone", doctorsPhone);
				listDoctorsPatientLink = doctorsPatientLinkService.getList("selectByPhone", doctorsPhone);
				listDoctorsPatientLink2 = doctorsPatientLinkService.getList("selectTypeNumByPhone", doctorsPhone);
				if (listDoctorsPatientLink != null) {
					for (int i = 0; i < listDoctorsPatientLink.size(); i++) {
						PatientUser patientUser = patientUserService.findByParam("selectByPhone",
								listDoctorsPatientLink.get(i).getPatientPhone());// 查询患者资料
						listDoctorsPatientLink.get(i).setPatientUser(patientUser);
					}
					results.setCode(MessageCode.CODE_200);
					results.setMessage(MessageCode.MESSAGE_200);
					map.put("doctorsPatientLink", listDoctorsPatientLink);
					int undoTypeCount = listDoctorsPatientLink2.size();
					map.put("undoTypeCount", undoTypeCount);
					results.setData(map);
					return results;
				} else {
					results.setCode(MessageCode.CODE_404);
					results.setMessage(MessageCode.MESSAGE_404);
					return results;
				}
			} else {
				results.setCode(MessageCode.CODE_201);
				results.setMessage(MessageCode.MESSAGE_201);
				return results;
			}
		} else {
			results.setCode(MessageCode.CODE_201);
			results.setMessage(MessageCode.MESSAGE_201);
			return results;
		}

	}

	/**
	 * 
	 * @Title: selectUndoRequest @Description: TODO @param @param
	 *         request @param @return 设定文件 @return Results<Map<String,Object>>
	 *         返回类型 @throws
	 */
	@SystemControllerLog(description = "查询所有患者请求")
	@RequestMapping(value = "selectUndoRequest")
	@ResponseBody
	Results<Map<String, Object>> selectUndoRequest(HttpServletRequest request) {
		// doctors_patient_link,查询条件为医生电话
		Results<Map<String, Object>> results = new Results<Map<String, Object>>();
		List<DoctorsPatientLink> listDoctorsPatientLink = null;
		// List<DoctorsPatientLink> listDoctorsPatientLink_ = null;
		Map<String, Object> map = new HashMap<String, Object>();

		String doctorsPatientLink = request.getParameter("doctorsPatientLink");
		JSONObject dataJsonObject = JSONObject.parseObject(doctorsPatientLink);
		String doctorsPhone;
		if (dataJsonObject != null) {
			doctorsPhone = dataJsonObject.getString("doctorsPhone");
			if (StringUtils.isNotBlank(doctorsPhone)) {
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("doctorsPhone", doctorsPhone);
				listDoctorsPatientLink = doctorsPatientLinkService.getList("selectByPhone_", doctorsPhone);

				if (listDoctorsPatientLink != null) {
					for (int i = 0; i < listDoctorsPatientLink.size(); i++) {
						PatientUser patientUser = patientUserService.findByParam("selectByPhone",
								listDoctorsPatientLink.get(i).getPatientPhone());// 查询患者资料
						listDoctorsPatientLink.get(i).setPatientUser(patientUser);
					}
					results.setCode(MessageCode.CODE_200);
					results.setMessage(MessageCode.MESSAGE_200);
					map.put("doctorsPatientLink", listDoctorsPatientLink);

					results.setData(map);
					return results;
				} else {
					results.setCode(MessageCode.CODE_404);
					results.setMessage(MessageCode.MESSAGE_404);
					return results;
				}
			} else {
				results.setCode(MessageCode.CODE_201);
				results.setMessage(MessageCode.MESSAGE_201);
				return results;
			}
		} else {
			results.setCode(MessageCode.CODE_201);
			results.setMessage(MessageCode.MESSAGE_201);
			return results;
		}

	}

	/**
	 * 
	 * @Title: selectPatientInfo @Description: TODO @param @param
	 *         request @param @return 设定文件 @return Results<Map<String,Object>>
	 *         返回类型 @throws
	 */
	@RequestMapping(value = "selectPatientInfo")
	@ResponseBody
	@SystemControllerLog(description = "查询患者资料")
	public Results<Map<String, Object>> selectPatientInfo(HttpServletRequest request) {
		// TODO Auto-generated method stub
		Results<Map<String, Object>> results = new Results<Map<String, Object>>();
		Map<String, Object> map = new HashMap<String, Object>();

		PatientUser patientUser;
		String equipmentData = request.getParameter("equipmentData");
		String phone = request.getParameter("patientPhone");// 患者电话
		JSONObject dataJsonObject = JSONObject.parseObject(equipmentData);
		String doctorPhone;
		if (dataJsonObject != null && phone != null) {
			doctorPhone = dataJsonObject.getString("phone");
			if (StringUtils.isNotBlank(phone) && StringUtils.isNotBlank(doctorPhone)) {
				patientUser = patientUserService.findByParam("selectByPhone", phone);// 查询患者资料
				Map<String, Object> paramMap = new HashMap<String, Object>();
				paramMap.put("doctors_phone", doctorPhone);
				paramMap.put("patient_phone", phone);
				DoctorsPatientLink doctorsPatientLink_ = doctorsPatientLinkService
						.findByParam("selectByDoctorsPhoneAndPatientPhone", paramMap);

				if (patientUser != null && doctorsPatientLink_ != null) {
					results.setCode(MessageCode.CODE_200);
					results.setMessage(MessageCode.MESSAGE_200);
					int type = doctorsPatientLink_.getType();
					map.put("type", type);
					map.put("patientUser", patientUser);
					map.put("doctorsPatientLink", doctorsPatientLink_);
					results.setData(map);
					return results;
				} else {
					results.setCode(MessageCode.CODE_404);
					results.setMessage(MessageCode.MESSAGE_404);
					results.setData(null);
					return results;
				}
			} else {
				results.setCode(MessageCode.CODE_201);
				results.setData(null);
				results.setMessage(MessageCode.MESSAGE_201);
				return results;
			}
		} else {
			results.setCode(MessageCode.CODE_201);
			results.setData(null);
			results.setMessage(MessageCode.MESSAGE_201);
			return results;
		}
	}

	/**
	 * parameter={"doctorsPhone":"","patientPhone":"","oldGroupName":"",
	 * "newGroupName":""} @Title: groupByDoctor @Description: TODO @param @param
	 * parameter @param @param request @param @return 设定文件 @return Results<Map
	 * <String,Object>> 返回类型 @throws
	 */
	@SystemControllerLog(description = "医生给患者好友分组")
	@RequestMapping({ "groupByDoctor" })
	@ResponseBody
	public Results<Map<String, Object>> groupByDoctor(@RequestParam String parameter, HttpServletRequest request) {
		Results<Map<String, Object>> results = new Results<Map<String, Object>>();
		Map<String, Object> map = new HashMap<String, Object>();
		System.out.println("parameter:----" + parameter);
		JSONObject dataJsonObject = JSONObject.parseObject(parameter);
		String doctorsPhone = dataJsonObject.getString("doctorsPhone");
		String patientPhone = dataJsonObject.getString("patientPhone");
		String oldGroupName = dataJsonObject.getString("oldGroupName");
		String newGroupName = dataJsonObject.getString("newGroupName");

		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("doctorsPhone", doctorsPhone);
		paramMap.put("patientPhone", patientPhone);
		paramMap.put("type", 1);

		List<DoctorsPatientLink> doctorsPatientLinkList = doctorsPatientLinkService
				.getList("selectByDoctorsPhoneAndPatientPhone", paramMap);
		if (doctorsPatientLinkList != null && doctorsPatientLinkList.size() > 0) {
			DoctorsPatientLink doctorsPatientLink = doctorsPatientLinkList.get(0);
			doctorsPatientLink.setGroupName(newGroupName);
			doctorsPatientLink.setType(1);
			doctorsPatientLink.setUpdatetime(new Date());
			doctorsPatientLinkService.update("updateByPrimaryKey", doctorsPatientLink);
			results.setCode(MessageCode.CODE_200);
			results.setMessage("成功");
			results.setData(map);
		} else {
			results.setCode(MessageCode.CODE_404);
			results.setMessage("不存在该患者好友");
		}

		return results;
	}

	/**
	 * doctorsPatientLinkJson={"doctorsPhone":"","patientPhone":""} @Title:
	 * noMoreMention @Description: TODO @param @param
	 * doctorsPatientLink @param @param request @param @return 设定文件 @return
	 * Results<Map<String,Object>> 返回类型 @throws
	 */
	@SystemControllerLog(description = "不再提示患者添加好友请求")
	@RequestMapping(value = "noMoreMention")
	@ResponseBody
	public Results<Map<String, Object>> noMoreMention(@RequestParam String doctorsPatientLinkJson,
			HttpServletRequest request) {
		Results<Map<String, Object>> results = new Results<Map<String, Object>>();
		Map<String, Object> map = new HashMap<String, Object>();
		JSONObject doctorsUserObject = JSONObject.parseObject(doctorsPatientLinkJson);
		Map<String, Object> paramMap = new HashMap<String, Object>();
		String doctorsPhone = doctorsUserObject.getString("doctorsPhone");
		String patientPhone = doctorsUserObject.getString("patientPhone");
		paramMap.put("doctors_phone", doctorsPhone);
		paramMap.put("patient_phone", patientPhone);
		paramMap.put("type", 3);

		DoctorsPatientLink doctorsPatientLink = doctorsPatientLinkService
				.findByParam("selectByDoctorsPhoneAndPatientPhone", paramMap);
		PatientDoctorsLink patientDoctorsLink = patientDoctorsLinkService
				.findByParam("selectByPatientPhoneAndDoctorsPhone", paramMap);
		if (doctorsPatientLink == null || patientDoctorsLink == null) {
			results.setCode(MessageCode.CODE_404);
			results.setMessage("不存在记录");
			return results;
		}

		doctorsPatientLink.setType(4);
		patientDoctorsLink.setType(4);

		doctorsPatientLinkService.update("updateByPrimaryKey", doctorsPatientLink);
		patientDoctorsLinkService.update("updateByPrimaryKey", patientDoctorsLink);

		results.setCode(MessageCode.CODE_200);
		results.setMessage("成功");
		results.setData(map);
		return results;
	}

}
